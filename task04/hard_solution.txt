<task>
  You are an intelligent agent solving a 2D maze puzzle. The goal is to guide a robot from its starting position "R" to the destination "D" using valid steps.
</task>

<constraints>
  <movement>
    The robot can move in four directions only:
    <steps>UP, DOWN, LEFT, RIGHT</steps>
  </movement>
  <rules>
    - The robot cannot move into walls ("W").  
    - The robot can only move into empty spaces ("0") or the destination ("D").  
    - Moving off the edge of the map is not allowed.
    - Each step must be to an adjacent cell (no diagonal moves or skipping cells).
  </rules>
</constraints>

<input_format>
  The maze is a grid defined by:
  <size>WIDTH x HEIGHT</size>
  <legend>
    0: Empty space  
    W: Wall (impassable)  
    R: Robot start position (only one)  
    D: Destination (only one)  
  </legend>
  The maze is represented row by row, top to bottom, with each character representing one cell.
  Row 0 is the top row, and column 0 is the leftmost column.
</input_format>

<example_input>
  <size>6x4</size>
  <map>
    0W0000  
    000W00  
    0W0W00  
    RW000D  
  </map>
</example_input>

<coordinate_system>
  - Positions are represented as [row, column] with [0,0] being the top-left corner.
  - Moving UP decreases the row by 1.
  - Moving DOWN increases the row by 1.
  - Moving LEFT decreases the column by 1.
  - Moving RIGHT increases the column by 1.
</coordinate_system>

<reasoning_instructions>
  Follow this process to solve the maze:
  1. First, identify the starting position [row, col] of the robot "R" and the destination "D".
  2. Convert the maze into a 2D grid for easier tracking.
  3. Use breadth-first search (BFS) to find the shortest path:
     - Start from the robot's position.
     - For each position, check all four directions (UP, DOWN, LEFT, RIGHT).
     - For each direction, calculate the new position and verify it's valid:
       - The new position must be within the maze boundaries.
       - The new position must not be a wall ("W").
     - Keep track of visited positions to avoid cycles.
     - For each valid position, remember which direction you took to reach it.
     - Continue until you reach the destination "D".
  4. Once the destination is found, backtrack from the destination to the start to determine the path.
  5. Convert the path into a sequence of direction commands (UP, DOWN, LEFT, RIGHT).
</reasoning_instructions>

<solution_verification>
  Before finalizing your answer:
  1. Trace through your solution step by step on the maze.
  2. For each step, verify the new position is valid (not a wall, not off the map).
  3. Confirm that your sequence of moves leads from the start to the destination.
  4. Check that each move only goes to an adjacent cell.
</solution_verification>

<output_format>
  Your final response MUST be a JSON object with the following structure:
  <json_output>
    {
      "reasoning": "<detailed step-by-step reasoning including the coordinates at each step>",
      "steps": "<comma-separated, uppercase steps>"  <!-- Example: "UP,RIGHT,RIGHT,UP,LEFT" -->
    }
  </json_output>
  Do not include anything outside the JSON object. Do not add explanations or notes after it.
</output_format>

The maze:
<size>6x4</size>
<map>
  0W0000  
  000W00  
  0W0W00  
  RW000D  
</map>
